debug_mode=yes
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"
log_facility=LOG_LOCAL7
log_level=3
children=4
listen=udp:127.0.0.1:5060

loadmodule "proto_udp.so"
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
modparam("tm", "fr_inv_timer", 60)
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "sipmsgops.so"
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", 3)
modparam("usrloc", "use_domain", 1)
modparam("usrloc", "user_column", "username")
modparam("usrloc", "domain_column", "domain")
modparam("usrloc", "contact_column", "contact")
modparam("usrloc", "expires_column", "expires")
modparam("usrloc", "q_column", "q")
modparam("usrloc", "callid_column", "callid")
modparam("usrloc", "cseq_column", "cseq")
modparam("usrloc", "methods_column", "methods")
modparam("usrloc", "flags_column", "flags")
modparam("usrloc", "cflags_column", "cflags")
modparam("usrloc", "user_agent_column", "user_agent")
modparam("usrloc", "received_column", "received")
modparam("usrloc", "socket_column", "socket")
modparam("usrloc", "path_column", "path")
modparam("usrloc", "desc_time_order", 1)
modparam("usrloc", "timer_interval", 30)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "db_url", "mysql://MYSQL_USER:MYSQL_PASSWORD@MYSQL_DATABASE_HOST/MYSQL_DATABASE_NAME")
loadmodule "dialog.so"
loadmodule "registrar.so"
modparam("registrar", "max_contacts", 1)
loadmodule "nat_traversal.so"
modparam("nat_traversal", "keepalive_interval", 30)
modparam("nat_traversal", "keepalive_method", "NOTIFY")
modparam("nat_traversal", "keepalive_from", "sip:keepalive@127.0.0.1")
loadmodule "mi_datagram.so"
modparam("mi_datagram", "socket_name", "udp:127.0.0.1:8080")
loadmodule "event_datagram.so"
loadmodule "db_mysql.so"
loadmodule "uac.so"
modparam("uac", "restore_mode", "auto")
loadmodule "uac_auth.so"
loadmodule "avpops.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "db_url", "mysql://MYSQL_USER:MYSQL_PASSWORD@MYSQL_DATABASE_HOST/MYSQL_DATABASE_NAME")
modparam("auth_db", "use_domain", 1)

route {
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (!is_method("REGISTER")) {	
		record_route(); 
		# record route helps to capture dialogs.
	}
	
	if (has_totag()) {
		if (loose_route()) {
			if (is_method("INVITE")) {
				record_route(); 
				# record route helps to capture dialogs.
			}
			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			t_relay();
			exit;
		} else {
			if (is_method("ACK")) {
				if (t_check_trans()) {
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ->
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
	
	if (is_method("CANCEL")) {
	if (t_check_trans())
				t_relay();
	exit;
	}
	
	t_check_trans();
	
	if (loose_route()) {
		xlog("L_ERR","Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}
	
	if(is_method("REGISTER")) {
		route(registration_requests);
				exit();
	}

    if(is_method("INVITE")) {
        ## these lines are kept because they will be used for differentiating the calls coming in
        ## and where to route it...
        ##$avp(OUT) = $hdr(X-OUT);
        ##if (avp_check("$avp(OUT)", "eq/0")) {
        ##    route(invite_requests);
        ##} else {
        ##    if (avp_check("$avp(OUT)", "eq/1")) {
        ##        route(invite_carrier_requests);
        ##    } else {
        ##        exit;
        ##    }
        ##}
        route(invite_requests);
        exit;
    }

	if(is_method("OPTIONS")) {
            sl_send_reply("200","Options Response Served");
            exit;
        }

	if(is_method("BYE")) {
	
	t_relay();
		exit;
	}
	
	if(is_method("ACK")) {
		t_relay();
		exit;
	}
}


route[invite_requests] {
	route(nat_check);
	
        # reroute any call coming from any US based 10 digit number to freeswitch ip and port
        if($ru =~ "sip:\+13312401864") {
                rewritehostport("freeswitch:5085");
                t_relay();
                exit;
        }
	if($ru =~ "sip:\w*@sip\.us1\.twilio\.com") {
                rewritehostport("freeswitch:5085");
                t_relay();
                exit;
        }

	if(!lookup("location")) {
		sl_send_reply("404", "User Not registered");
		exit;
	}
	    t_on_reply("user_reply");	
	    t_relay();	
	exit;		
    }

route[invite_carrier_requests] {
    route(nat_check);
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

route[registration_requests] {
	route(nat_check);	

        $var(auth_code) = www_authorize("", "subscriber");
        if ( $var(auth_code) == -1 || $var(auth_code) == -2 ) {
                 xlog("L_NOTICE","Auth error for $fU@$fd from $si cause $var(auth_code)");
        }
        if ( $var(auth_code) < 0 ) {
                 www_challenge("", "1");
                 exit;
        }
	##save("location","sc1vp1");
    save("location","svfp1");
	exit;
}


route[nat_check] {
	if (client_nat_test("3")) {
		force_rport();
#		fix_contact();
		nat_keepalive();
	}
}

onreply_route[user_reply] {
	if (client_nat_test("1")) {
		fix_contact();
	}
}
